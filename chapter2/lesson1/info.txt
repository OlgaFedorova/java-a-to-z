Вся программа располагается в пакете ofedorova.
Пакет ofedorova включает в себя:

1.Пакет models, который включает в себя:

1.1. Класс Item описывает модель заявки.
Класс содержит поля name (Имя), description (Описание), dateCreate (Дата создания), сomment (список комментариев), id (уникальный идентификатор), геттеры и сеттеры для этих полей.

1.2. Абстрактный класс Filter - реализует модель фильтра, для поиска заявок.
Поле value - значение поля для поиска.
Метод find - в который передается массив заявок, и который возвращает массив заявок с учетом отбора.
1.3. Класс FilterByName наследник Filter, для поиска заявки по полю name. (доступ к классу в пределах пакета)
1.4. Класс FilterByDescription наследник Filter, для поиска заявки по полю description.(доступ к классу в пределах пакета)
1.5. Класс FilterFactory - реализует фабрику фильтров (паттерн Фабрика).
Метод getFilter - возвращает соответствующий Filter в зависимости от переданного параметра key.


2. Пакет start, который включает в себя:

2.1. Класс Tracker - используется, как хранилище заявок.
Поле items - массив заявок.
Поле position - текущая позиция для добавления заявки в массив.
Поле константа RN - рандомайзер для генерации id заявки.
Метод getItems - геттер для поля items. 
Есть вариант перегруженного метода - в параметры передается фильтр, по которому возвращается соответствующий список заявок.
Метод addItem - добавляет заявку в массив items.
Метод removeItem - удаляет заявку из массива items.
Метод editItem - редактирует заявку, переданную в параметре.
Метод findbyId - находит заявку по id.
Метод generateId - генерирует уникальное id для новой заявки.

2.2. Интерфейс Input - обеспечивает инструмент ввода информации.
2.3. Класс ConsoleInput реализует интерфейс Input с помощью класса BufferedReader.
2.4. Класс StubInput реализует Интерфейс Input с помощью статических данных.

2.5. Класс StartUI - главный класс с которого стартует программа.

2.6. Класс MenuTracker - класс с помощью которого происходит управление хранилищем заявок.
Поле input - инструмент ввода информации.
Поле tracker - тип Tracker, хранилище заявок.
Поле actions - массив доступных действий.
Поле exit - тип boolean, признак того, что необходимо закончить работу программы.
Метод fillActions - заполняет массив actions.
Метод select - выполняет действие по переданному ключу.
Метод show - отображает информацию о списке доступных действий на экран.
Метод isExit - геттер для поля exit.
Класс содержит:
2.6.1. Вложенный интерфейс UserAction - реализует "действие".
Метод key - возвращает ключ действия.
Метод execute - метод выполнения действия.
Метод info - информация о действии.
2.6.2. Внутренний абстрактный класс BaseAction реализует интерфейс UserAction.
2.6.3. Внутренний класс AddNewItemAction наследник класса BaseAction, реализует команду "Добавление новой заявки".
2.6.4. Внутренний класс EditItemAction наследник класса BaseAction, реализует команду "Редактирование заявки".
2.6.5. Внутренний класс RemoveItemAction наследник класса BaseAction, реализует команду "Удаление заявки".
2.6.6. Внутренний класс ShowListItemsAction наследник класса BaseAction, реализует команду "Отображение списка всех заявок".
2.6.7. Внутренний класс ShowListItemsByFilterAction наследник класса BaseAction, реализует команду "Отображение заявок с условием фильтра".
2.6.8. Внутренний класс AddNewCommentAction наследник класса BaseAction, реализует команду "Добавлять к заявки комментарий".
2.6.9. Внутренний класс ExitAction наследник класса BaseAction, реализует команду "Выход из программы".


3. Метод init класса StartUI

public void init(){
	
	Tracker tracker = new Tracker(); //создаем объект главного класса
	MenuTracker menu = new MenuTracker(this.input, tracker);
	menu.fillActions();
	do{
	
		menu.show(); //показываем косольное меню
		int key = Integer.valueOf(this.input.ask("Select action"));//получаем номер команды от пользователя
		menu.select(key); // Выполняем выбранную команду
	
	}
	while(!menu.isExit()); //пока не сказали "Выходи" выполняем тело цикла

}


